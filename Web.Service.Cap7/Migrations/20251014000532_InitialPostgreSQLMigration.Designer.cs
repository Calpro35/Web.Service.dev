// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web.Service.Cap7.Data.Context;

#nullable disable

namespace Web.Service.Cap7.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251014000532_InitialPostgreSQLMigration")]
    partial class InitialPostgreSQLMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("SEQ_EQUIPMENTS");

            modelBuilder.HasSequence<int>("SEQ_SECTORS");

            modelBuilder.HasSequence<int>("SEQ_USERS");

            modelBuilder.Entity("Web.Service.Cap7.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("SEQ_EQUIPMENTS.NEXTVAL");

                    b.Property<double>("ConsumptionPerHour")
                        .HasColumnType("double precision")
                        .HasColumnName("CONSUMPTION_PER_HOUR");

                    b.Property<double>("ConsumptionTotal")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<DateTime>("LastActivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LAST_ACTIVED_AT");

                    b.Property<int>("MaxActiveHours")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_ACTIVE_HOURS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("SectorId")
                        .HasColumnType("integer")
                        .HasColumnName("SECTOR_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("EQUIPMENTS", (string)null);
                });

            modelBuilder.Entity("Web.Service.Cap7.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("SEQ_SECTORS.NEXTVAL");

                    b.Property<double>("ConsumptionLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("CONSUMPTION_LIMIT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SECTORS", (string)null);
                });

            modelBuilder.Entity("Web.Service.Cap7.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("SEQ_USERS.NEXTVAL");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("PASSWORD_SALT");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("ROLE");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_USERS_EMAIL");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("Web.Service.Cap7.Models.Equipment", b =>
                {
                    b.HasOne("Web.Service.Cap7.Models.Sector", "Sector")
                        .WithMany("Equipments")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Web.Service.Cap7.Models.Sector", b =>
                {
                    b.HasOne("Web.Service.Cap7.Models.User", "User")
                        .WithMany("Sectors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.Service.Cap7.Models.Sector", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Web.Service.Cap7.Models.User", b =>
                {
                    b.Navigation("Sectors");
                });
#pragma warning restore 612, 618
        }
    }
}
